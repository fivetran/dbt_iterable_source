{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-07-25T18:07:51.600510Z", "invocation_id": "8012d9ec-de4c-41a3-861e-9a76e59cca41", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.695491Z", "completed_at": "2024-07-25T18:07:45.710357Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:45.712000Z", "completed_at": "2024-07-25T18:07:45.712017Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020767688751220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`campaign_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.706139Z", "completed_at": "2024-07-25T18:07:45.710654Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:45.712442Z", "completed_at": "2024-07-25T18:07:45.712447Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019945144653320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`channel`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.700391Z", "completed_at": "2024-07-25T18:07:45.710934Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:45.712663Z", "completed_at": "2024-07-25T18:07:45.712669Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02107691764831543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`campaign_list_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_list_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.708080Z", "completed_at": "2024-07-25T18:07:45.711371Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:45.713475Z", "completed_at": "2024-07-25T18:07:45.713479Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020432233810424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`event`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.718002Z", "completed_at": "2024-07-25T18:07:45.725314Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:45.726196Z", "completed_at": "2024-07-25T18:07:45.726201Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011256217956542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`list`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.721788Z", "completed_at": "2024-07-25T18:07:45.725803Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:45.727528Z", "completed_at": "2024-07-25T18:07:45.727532Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011765003204345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`template_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.720118Z", "completed_at": "2024-07-25T18:07:45.725991Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:45.727724Z", "completed_at": "2024-07-25T18:07:45.727727Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012440681457519531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`message_type`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.723509Z", "completed_at": "2024-07-25T18:07:45.726393Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:45.728155Z", "completed_at": "2024-07-25T18:07:45.728158Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012201070785522461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`user_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.737478Z", "completed_at": "2024-07-25T18:07:46.103986Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:46.104695Z", "completed_at": "2024-07-25T18:07:46.104701Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.37439990043640137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_state\n    \n as \n    \n    campaign_state\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    created_by_user_id\n    \n as \n    \n    created_by_user_id\n    \n, \n    \n    \n    updated_by_user_id\n    \n as \n    \n    updated_by_user_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    recurring_campaign_id\n    \n as \n    \n    recurring_campaign_id\n    \n, \n    \n    \n    send_size\n    \n as \n    \n    send_size\n    \n, \n    \n    \n    start_at\n    \n as \n    \n    start_at\n    \n, \n    \n    \n    template_id\n    \n as \n    \n    template_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as string) as campaign_id,\n        updated_at,\n        name as campaign_name,\n        campaign_state,\n        type as campaign_type,\n        send_size,\n        start_at,\n        ended_at,\n        created_at,\n        message_medium,\n        cast(recurring_campaign_id as string) as recurring_campaign_id,\n        cast(created_by_user_id as string ) as created_by_user_id,\n        cast(updated_by_user_id as string ) as updated_by_user_id,\n        cast(template_id as string) as template_id,\n        workflow_id,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.739667Z", "completed_at": "2024-07-25T18:07:46.159792Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:46.160268Z", "completed_at": "2024-07-25T18:07:46.160273Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4260680675506592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_type\n    \n as \n    \n    channel_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as string ) as channel_id,\n        name as channel_name,\n        channel_type,\n        message_medium,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:46.106878Z", "completed_at": "2024-07-25T18:07:46.448727Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:46.449651Z", "completed_at": "2024-07-25T18:07:46.449660Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3446688652038574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_list_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    list_id\n    \n as \n    \n    list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(campaign_id as string) as campaign_id,\n        cast(list_id as string) as list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_list_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:46.161941Z", "completed_at": "2024-07-25T18:07:46.501702Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:46.502178Z", "completed_at": "2024-07-25T18:07:46.502186Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.34131813049316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    cast(null as string) as \n    \n    _fivetran_user_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    event_name\n    \n as \n    \n    event_name\n    \n, \n    \n    \n    message_bus_id\n    \n as \n    \n    message_bus_id\n    \n, \n    \n    \n    message_id\n    \n as \n    \n    message_id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    recipient_state\n    \n as \n    \n    recipient_state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    unsub_source\n    \n as \n    \n    unsub_source\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n, \n    \n    \n    user_agent_device\n    \n as \n    \n    user_agent_device\n    \n, \n    \n    \n    transactional_data\n    \n as \n    \n    transactional_data\n    \n, \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(_fivetran_id as string ) as event_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(_fivetran_user_id as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_event_id,\n        cast(_fivetran_user_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_user_id as string ) , email) as unique_user_key,\n        cast(campaign_id as string ) as campaign_id,\n        cast(content_id as string ) as content_id,\n        created_at,\n        cast( timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    ) as date) as created_on,\n        lower(email) as email,\n        additional_properties,\n        event_name,\n        cast(message_bus_id as string ) as message_bus_id,\n        cast(message_id as string ) as message_id,\n        cast(message_type_id as string ) as message_type_id,\n        recipient_state,\n        status,\n        transactional_data,\n        unsub_source,\n        user_agent,\n        user_agent_device,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:46.452554Z", "completed_at": "2024-07-25T18:07:46.764518Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:46.765486Z", "completed_at": "2024-07-25T18:07:46.765494Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.31461310386657715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list_tmp`\n    where not coalesce(_fivetran_deleted, true)\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    list_type\n    \n as \n    \n    list_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as list_id,\n        name as list_name,\n        list_type,\n        created_at,\n        description as list_description,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:46.503853Z", "completed_at": "2024-07-25T18:07:46.780417Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:46.780989Z", "completed_at": "2024-07-25T18:07:46.780997Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2784876823425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    client_template_id\n    \n as \n    \n    client_template_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_user_id\n    \n as \n    \n    creator_user_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    template_type\n    \n as \n    \n    template_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string ) as template_id,\n        name as template_name,\n        template_type,\n        created_at,\n        cast(client_template_id as string ) as client_template_id,\n        cast(creator_user_id as string ) as creator_user_id,\n        cast(message_type_id as string ) as message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:46.767952Z", "completed_at": "2024-07-25T18:07:47.200171Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.200951Z", "completed_at": "2024-07-25T18:07:47.200957Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4345848560333252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    frequency_cap\n    \n as \n    \n    frequency_cap\n    \n, \n    \n    \n    rate_limit_per_minute\n    \n as \n    \n    rate_limit_per_minute\n    \n, \n    \n    \n    subscription_policy\n    \n as \n    \n    subscription_policy\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as string ) as message_type_id,\n        name as message_type_name,\n        cast(channel_id as string ) as channel_id,\n        created_at as message_type_created_at,\n        frequency_cap,\n        rate_limit_per_minute,\n        subscription_policy,\n        updated_at as message_type_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:46.783070Z", "completed_at": "2024-07-25T18:07:47.200394Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.201121Z", "completed_at": "2024-07-25T18:07:47.201124Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.41945600509643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    email_list_ids\n    \n as \n    \n    email_list_ids\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    signup_date\n    \n as \n    \n    signup_date\n    \n, \n    \n    \n    signup_source\n    \n as \n    \n    signup_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    cast(null as string) as \n    \n    iterable_user_id\n    \n , \n    \n    \n    phone_number_line_type\n    \n as phone_digits , \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        lower(email) as email,\n        updated_at,\n        cast(user_id as string ) as user_id,\n        first_name,\n        last_name,\n        cast(email_list_ids as string) as email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        cast(iterable_user_id as string ) as iterable_user_id,\n        _fivetran_synced,\n        coalesce(cast(_fivetran_id as string ) , email) as unique_user_key\n\n        \n\n\n    \n        \n            \n                , phone_digits\n            \n        \n    \n        \n            \n                , additional_properties\n            \n        \n    \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.211043Z", "completed_at": "2024-07-25T18:07:47.214904Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.215606Z", "completed_at": "2024-07-25T18:07:47.215612Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012484073638916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id.b7c36e4525", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.204749Z", "completed_at": "2024-07-25T18:07:47.215103Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.215774Z", "completed_at": "2024-07-25T18:07:47.215778Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013136863708496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at.81e1a1b9b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history`\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.219911Z", "completed_at": "2024-07-25T18:07:47.222998Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.223775Z", "completed_at": "2024-07-25T18:07:47.223781Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00688934326171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__channel_channel_id.fc1eec7fbc", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select channel_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel`\n  where channel_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.218034Z", "completed_at": "2024-07-25T18:07:47.223184Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.223962Z", "completed_at": "2024-07-25T18:07:47.223965Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007521152496337891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__channel_channel_id.182ceb9636", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel`\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.228253Z", "completed_at": "2024-07-25T18:07:47.230815Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.231648Z", "completed_at": "2024-07-25T18:07:47.231653Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006624937057495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__event_unique_event_id__created_at.468c9e26a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_event_id, created_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event`\n    group by unique_event_id, created_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.226346Z", "completed_at": "2024-07-25T18:07:47.231017Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.231843Z", "completed_at": "2024-07-25T18:07:47.231847Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007252931594848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id.208f9bf9ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_list_history`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.234018Z", "completed_at": "2024-07-25T18:07:47.239065Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.239783Z", "completed_at": "2024-07-25T18:07:47.239789Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007111072540283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__event_event_id.370cd4bc9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.236014Z", "completed_at": "2024-07-25T18:07:47.239268Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.239964Z", "completed_at": "2024-07-25T18:07:47.239967Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007194042205810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__list_list_id.47029d839a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect list_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list`\nwhere list_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.244467Z", "completed_at": "2024-07-25T18:07:47.246662Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.247391Z", "completed_at": "2024-07-25T18:07:47.247397Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0063478946685791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at.e0b90faa8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        template_id, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history`\n    group by template_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.242218Z", "completed_at": "2024-07-25T18:07:47.246858Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.247587Z", "completed_at": "2024-07-25T18:07:47.247590Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006999015808105469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__list_list_id.1e73c3def7", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select list_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list`\n  where list_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.251945Z", "completed_at": "2024-07-25T18:07:47.254240Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.254976Z", "completed_at": "2024-07-25T18:07:47.254981Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006307840347290039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__message_type_message_type_id.75eaa6fa62", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type`\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.249860Z", "completed_at": "2024-07-25T18:07:47.254441Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.255174Z", "completed_at": "2024-07-25T18:07:47.255177Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00705409049987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__template_history_template_id.14b24a1dfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect template_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history`\nwhere template_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.257597Z", "completed_at": "2024-07-25T18:07:47.262450Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.263181Z", "completed_at": "2024-07-25T18:07:47.263188Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007055044174194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__message_type_message_type_id.0f75f83a34", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select message_type_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type`\n  where message_type_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.259677Z", "completed_at": "2024-07-25T18:07:47.262654Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.263394Z", "completed_at": "2024-07-25T18:07:47.263397Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007174015045166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_unique_user_key__updated_at.3e120444d3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history`\n    group by unique_user_key, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:47.265125Z", "completed_at": "2024-07-25T18:07:47.268028Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:47.268490Z", "completed_at": "2024-07-25T18:07:47.268495Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004197835922241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_history_unique_user_key.2845af2127", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history`\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.735560Z", "completed_at": "2024-07-25T18:07:48.144051Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:48.145438Z", "completed_at": "2024-07-25T18:07:48.145456Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.4160189628601074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`user_unsubscribed_channel_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:45.731093Z", "completed_at": "2024-07-25T18:07:48.644973Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:48.646380Z", "completed_at": "2024-07-25T18:07:48.646397Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.918560028076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`iterable`.`user_unsubscribed_message_type_history`\n-- had to rename this to be compatible with postgres....", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:48.149456Z", "completed_at": "2024-07-25T18:07:50.913100Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:50.914487Z", "completed_at": "2024-07-25T18:07:50.914504Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.767529010772705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel", "compiled": true, "compiled_code": "with base as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n\n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as string ), email) as unique_user_key,\n        cast(channel_id as string ) as channel_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(channel_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unsub_channel_unique_key,\n        \n        \n        rank() over(partition by email, channel_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:50.921546Z", "completed_at": "2024-07-25T18:07:50.932063Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:50.933525Z", "completed_at": "2024-07-25T18:07:50.933534Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01651620864868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_channel_id.da0ed9e9be", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel`\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:50.927603Z", "completed_at": "2024-07-25T18:07:50.932458Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:50.933888Z", "completed_at": "2024-07-25T18:07:50.933892Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016170978546142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsubscribed_channel_unsub_channel_unique_key.48ad1606c9", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unsub_channel_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel`\n  where unsub_channel_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:48.650884Z", "completed_at": "2024-07-25T18:07:51.575929Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:51.577503Z", "completed_at": "2024-07-25T18:07:51.577522Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.929434061050415, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select \n\n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as string ), email) as unique_user_key,\n        cast(message_type_id as string ) as message_type_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(message_type_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unsub_message_type_unique_key,\n        \n        \n        rank() over(partition by email, message_type_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:51.585264Z", "completed_at": "2024-07-25T18:07:51.595119Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:51.596609Z", "completed_at": "2024-07-25T18:07:51.596617Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015650033950805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_message_type_id.268a89ea6f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type`\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:07:51.590707Z", "completed_at": "2024-07-25T18:07:51.595484Z"}, {"name": "execute", "started_at": "2024-07-25T18:07:51.596976Z", "completed_at": "2024-07-25T18:07:51.596981Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01486515998840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsub_message_type_unsub_message_type_unique_key.2e13291de3", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unsub_message_type_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type`\n  where unsub_message_type_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 6.806512117385864, "args": {"cache_selected_only": false, "write_json": true, "defer": false, "compile": true, "quiet": false, "printer_width": 80, "exclude": [], "show_resource_report": false, "static": false, "macro_debugging": false, "populate_cache": true, "profiles_dir": "/Users/renee/.dbt", "strict_mode": false, "version_check": true, "log_file_max_bytes": 10485760, "warn_error_options": {"include": [], "exclude": []}, "use_colors": true, "favor_state": false, "introspect": true, "send_anonymous_usage_stats": true, "static_parser": true, "log_format": "default", "log_level_file": "debug", "log_level": "info", "print": true, "vars": {}, "log_path": "/Users/renee/Documents/dbt/iterable/develop/logs", "use_colors_file": true, "indirect_selection": "eager", "partial_parse": true, "which": "generate", "project_dir": "/Users/renee/Documents/dbt/iterable/develop", "enable_legacy_logger": false, "empty_catalog": false, "partial_parse_file_diff": true, "select": [], "log_format_file": "debug", "invocation_command": "dbt docs generate"}}