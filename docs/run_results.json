{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-07-23T22:16:28.356537Z", "invocation_id": "a0a61304-e598-456f-a79d-3b029388b62e", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.212200Z", "completed_at": "2024-07-23T22:16:21.216730Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.218471Z", "completed_at": "2024-07-23T22:16:21.218480Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021390676498413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`channel`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.200041Z", "completed_at": "2024-07-23T22:16:21.217116Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.218665Z", "completed_at": "2024-07-23T22:16:21.218669Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023595809936523438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`campaign_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.214289Z", "completed_at": "2024-07-23T22:16:21.217375Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.218864Z", "completed_at": "2024-07-23T22:16:21.218867Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021290063858032227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`event`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.205612Z", "completed_at": "2024-07-23T22:16:21.217585Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.219042Z", "completed_at": "2024-07-23T22:16:21.219046Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023333311080932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`campaign_list_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_list_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.223462Z", "completed_at": "2024-07-23T22:16:21.230542Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.231945Z", "completed_at": "2024-07-23T22:16:21.231949Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011211156845092773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`list`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.225281Z", "completed_at": "2024-07-23T22:16:21.230757Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.232153Z", "completed_at": "2024-07-23T22:16:21.232156Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011320114135742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`message_type`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.226986Z", "completed_at": "2024-07-23T22:16:21.230955Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.232517Z", "completed_at": "2024-07-23T22:16:21.232520Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01164698600769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`template_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.228700Z", "completed_at": "2024-07-23T22:16:21.231555Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.233524Z", "completed_at": "2024-07-23T22:16:21.233527Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012294292449951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`user_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.245403Z", "completed_at": "2024-07-23T22:16:21.608734Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.609562Z", "completed_at": "2024-07-23T22:16:21.609572Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.37333011627197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_state\n    \n as \n    \n    campaign_state\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    created_by_user_id\n    \n as \n    \n    created_by_user_id\n    \n, \n    \n    \n    updated_by_user_id\n    \n as \n    \n    updated_by_user_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    recurring_campaign_id\n    \n as \n    \n    recurring_campaign_id\n    \n, \n    \n    \n    send_size\n    \n as \n    \n    send_size\n    \n, \n    \n    \n    start_at\n    \n as \n    \n    start_at\n    \n, \n    \n    \n    template_id\n    \n as \n    \n    template_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as string) as campaign_id,\n        updated_at,\n        name as campaign_name,\n        campaign_state,\n        type as campaign_type,\n        send_size,\n        start_at,\n        ended_at,\n        created_at,\n        message_medium,\n        cast(recurring_campaign_id as string) as recurring_campaign_id,\n        cast(created_by_user_id as string ) as created_by_user_id,\n        cast(updated_by_user_id as string ) as updated_by_user_id,\n        cast(template_id as string) as template_id,\n        workflow_id,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.243425Z", "completed_at": "2024-07-23T22:16:21.658305Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:21.658800Z", "completed_at": "2024-07-23T22:16:21.658805Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4231140613555908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_type\n    \n as \n    \n    channel_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as string ) as channel_id,\n        name as channel_name,\n        channel_type,\n        message_medium,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.611708Z", "completed_at": "2024-07-23T22:16:22.006655Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.007195Z", "completed_at": "2024-07-23T22:16:22.007201Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3967428207397461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    cast(null as string) as \n    \n    _fivetran_user_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    event_name\n    \n as \n    \n    event_name\n    \n, \n    \n    \n    message_bus_id\n    \n as \n    \n    message_bus_id\n    \n, \n    \n    \n    message_id\n    \n as \n    \n    message_id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    recipient_state\n    \n as \n    \n    recipient_state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    unsub_source\n    \n as \n    \n    unsub_source\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n, \n    \n    \n    user_agent_device\n    \n as \n    \n    user_agent_device\n    \n, \n    \n    \n    transactional_data\n    \n as \n    \n    transactional_data\n    \n, \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(_fivetran_id as string ) as event_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(_fivetran_user_id as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_event_id,\n        cast(_fivetran_user_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_user_id as string ) , email) as unique_user_key,\n        cast(campaign_id as string ) as campaign_id,\n        cast(content_id as string ) as content_id,\n        created_at,\n        cast( timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    ) as date) as created_on,\n        lower(email) as email,\n        additional_properties,\n        event_name,\n        cast(message_bus_id as string ) as message_bus_id,\n        cast(message_id as string ) as message_id,\n        cast(message_type_id as string ) as message_type_id,\n        recipient_state,\n        status,\n        transactional_data,\n        unsub_source,\n        user_agent,\n        user_agent_device,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.660454Z", "completed_at": "2024-07-23T22:16:22.060197Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.060901Z", "completed_at": "2024-07-23T22:16:22.060908Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4015951156616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_list_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    list_id\n    \n as \n    \n    list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(campaign_id as string) as campaign_id,\n        cast(list_id as string) as list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_list_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.009180Z", "completed_at": "2024-07-23T22:16:22.403552Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.404501Z", "completed_at": "2024-07-23T22:16:22.404514Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.39710211753845215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list_tmp`\n    where not coalesce(_fivetran_deleted, true)\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    list_type\n    \n as \n    \n    list_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as list_id,\n        name as list_name,\n        list_type,\n        created_at,\n        description as list_description,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.062869Z", "completed_at": "2024-07-23T22:16:22.688145Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.689029Z", "completed_at": "2024-07-23T22:16:22.689041Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6277132034301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    frequency_cap\n    \n as \n    \n    frequency_cap\n    \n, \n    \n    \n    rate_limit_per_minute\n    \n as \n    \n    rate_limit_per_minute\n    \n, \n    \n    \n    subscription_policy\n    \n as \n    \n    subscription_policy\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as string ) as message_type_id,\n        name as message_type_name,\n        cast(channel_id as string ) as channel_id,\n        created_at as message_type_created_at,\n        frequency_cap,\n        rate_limit_per_minute,\n        subscription_policy,\n        updated_at as message_type_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.407808Z", "completed_at": "2024-07-23T22:16:22.820710Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.821381Z", "completed_at": "2024-07-23T22:16:22.821388Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4153769016265869, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    client_template_id\n    \n as \n    \n    client_template_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_user_id\n    \n as \n    \n    creator_user_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    template_type\n    \n as \n    \n    template_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string ) as template_id,\n        name as template_name,\n        template_type,\n        created_at,\n        cast(client_template_id as string ) as client_template_id,\n        cast(creator_user_id as string ) as creator_user_id,\n        cast(message_type_id as string ) as message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.823783Z", "completed_at": "2024-07-23T22:16:22.879901Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.880318Z", "completed_at": "2024-07-23T22:16:22.880323Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.060194969177246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at.81e1a1b9b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history`\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.883899Z", "completed_at": "2024-07-23T22:16:22.887824Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.888165Z", "completed_at": "2024-07-23T22:16:22.888169Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0050201416015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id.b7c36e4525", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.889316Z", "completed_at": "2024-07-23T22:16:22.891182Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.891506Z", "completed_at": "2024-07-23T22:16:22.891509Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.002913236618041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__channel_channel_id.182ceb9636", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel`\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.892576Z", "completed_at": "2024-07-23T22:16:22.895245Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.895553Z", "completed_at": "2024-07-23T22:16:22.895556Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003668069839477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__channel_channel_id.fc1eec7fbc", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select channel_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel`\n  where channel_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.896620Z", "completed_at": "2024-07-23T22:16:22.898882Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.899204Z", "completed_at": "2024-07-23T22:16:22.899207Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003260374069213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__event_unique_event_id__created_at.468c9e26a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_event_id, created_at\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event`\n    group by unique_event_id, created_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.900267Z", "completed_at": "2024-07-23T22:16:22.902037Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.902350Z", "completed_at": "2024-07-23T22:16:22.902353Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.002749204635620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__event_event_id.370cd4bc9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.903378Z", "completed_at": "2024-07-23T22:16:22.905080Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.905392Z", "completed_at": "2024-07-23T22:16:22.905395Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.002672910690307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id.208f9bf9ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_list_history`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.906427Z", "completed_at": "2024-07-23T22:16:22.908162Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.908446Z", "completed_at": "2024-07-23T22:16:22.908449Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0026760101318359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__list_list_id.47029d839a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect list_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list`\nwhere list_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.909433Z", "completed_at": "2024-07-23T22:16:22.911696Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.911976Z", "completed_at": "2024-07-23T22:16:22.911979Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003171205520629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__list_list_id.1e73c3def7", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select list_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list`\n  where list_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.912951Z", "completed_at": "2024-07-23T22:16:22.914614Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.914915Z", "completed_at": "2024-07-23T22:16:22.914917Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0025920867919921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__message_type_message_type_id.75eaa6fa62", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type`\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.915897Z", "completed_at": "2024-07-23T22:16:22.917389Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.917709Z", "completed_at": "2024-07-23T22:16:22.917711Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0024428367614746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__message_type_message_type_id.0f75f83a34", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select message_type_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type`\n  where message_type_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.918742Z", "completed_at": "2024-07-23T22:16:22.920556Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.920863Z", "completed_at": "2024-07-23T22:16:22.920865Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0027589797973632812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at.e0b90faa8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        template_id, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history`\n    group by template_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.921836Z", "completed_at": "2024-07-23T22:16:22.923446Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:22.923740Z", "completed_at": "2024-07-23T22:16:22.923742Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0025200843811035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__template_history_template_id.14b24a1dfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect template_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history`\nwhere template_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:22.693202Z", "completed_at": "2024-07-23T22:16:23.104638Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:23.105224Z", "completed_at": "2024-07-23T22:16:23.105230Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4139111042022705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    email_list_ids\n    \n as \n    \n    email_list_ids\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    signup_date\n    \n as \n    \n    signup_date\n    \n, \n    \n    \n    signup_source\n    \n as \n    \n    signup_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    cast(null as string) as \n    \n    iterable_user_id\n    \n , \n    \n    \n    phone_number_line_type\n    \n as phone_digits , \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        lower(email) as email,\n        updated_at,\n        cast(user_id as string ) as user_id,\n        first_name,\n        last_name,\n        cast(email_list_ids as string) as email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        cast(iterable_user_id as string ) as iterable_user_id,\n        _fivetran_synced,\n        coalesce(cast(_fivetran_id as string ) , email) as unique_user_key\n\n        \n\n\n    \n        \n            \n                , phone_digits\n            \n        \n    \n        \n            \n                , additional_properties\n            \n        \n    \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:23.108170Z", "completed_at": "2024-07-23T22:16:23.114267Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:23.114789Z", "completed_at": "2024-07-23T22:16:23.114793Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008713960647583008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_unique_user_key__updated_at.3e120444d3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history`\n    group by unique_user_key, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:23.111570Z", "completed_at": "2024-07-23T22:16:23.115057Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:23.116166Z", "completed_at": "2024-07-23T22:16:23.116171Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009367942810058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_history_unique_user_key.2845af2127", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history`\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.241198Z", "completed_at": "2024-07-23T22:16:24.279644Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:24.281803Z", "completed_at": "2024-07-23T22:16:24.281834Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.047689914703369, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`user_unsubscribed_channel_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:21.237342Z", "completed_at": "2024-07-23T22:16:24.758568Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:24.760292Z", "completed_at": "2024-07-23T22:16:24.760314Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.5266120433807373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`iterable`.`user_unsubscribed_message_type_history`\n-- had to rename this to be compatible with postgres....", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:24.288353Z", "completed_at": "2024-07-23T22:16:27.890146Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:27.891467Z", "completed_at": "2024-07-23T22:16:27.891485Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.6070919036865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel", "compiled": true, "compiled_code": "with base as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n\n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as string ), email) as unique_user_key,\n        cast(channel_id as string ) as channel_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(channel_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unsub_channel_unique_key,\n        \n        \n        rank() over(partition by email, channel_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:27.903493Z", "completed_at": "2024-07-23T22:16:27.907754Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:27.909191Z", "completed_at": "2024-07-23T22:16:27.909201Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014824151992797852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsubscribed_channel_unsub_channel_unique_key.48ad1606c9", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unsub_channel_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel`\n  where unsub_channel_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:27.897491Z", "completed_at": "2024-07-23T22:16:27.908240Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:27.909543Z", "completed_at": "2024-07-23T22:16:27.909548Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016299009323120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_channel_id.da0ed9e9be", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel`\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:24.765358Z", "completed_at": "2024-07-23T22:16:28.330248Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:28.331281Z", "completed_at": "2024-07-23T22:16:28.331292Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.568328857421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select \n\n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as string ), email) as unique_user_key,\n        cast(message_type_id as string ) as message_type_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(message_type_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unsub_message_type_unique_key,\n        \n        \n        rank() over(partition by email, message_type_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:28.338313Z", "completed_at": "2024-07-23T22:16:28.350687Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:28.351949Z", "completed_at": "2024-07-23T22:16:28.351957Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017834186553955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_message_type_id.268a89ea6f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type`\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:16:28.345770Z", "completed_at": "2024-07-23T22:16:28.351498Z"}, {"name": "execute", "started_at": "2024-07-23T22:16:28.353550Z", "completed_at": "2024-07-23T22:16:28.353556Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017802953720092773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsub_message_type_unsub_message_type_unique_key.2e13291de3", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unsub_message_type_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type`\n  where unsub_message_type_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 8.226157903671265, "args": {"partial_parse": true, "which": "generate", "use_colors": true, "introspect": true, "vars": {}, "exclude": [], "strict_mode": false, "printer_width": 80, "show_resource_report": false, "select": [], "use_colors_file": true, "log_format": "default", "print": true, "empty_catalog": false, "favor_state": false, "static_parser": true, "version_check": true, "invocation_command": "dbt docs generate", "partial_parse_file_diff": true, "send_anonymous_usage_stats": true, "compile": true, "profiles_dir": "/Users/renee/.dbt", "macro_debugging": false, "log_level": "info", "write_json": true, "log_format_file": "debug", "project_dir": "/Users/renee/Documents/dbt/iterable/develop", "static": false, "cache_selected_only": false, "quiet": false, "log_file_max_bytes": 10485760, "defer": false, "log_path": "/Users/renee/Documents/dbt/iterable/develop/logs", "indirect_selection": "eager", "warn_error_options": {"include": [], "exclude": []}, "enable_legacy_logger": false, "log_level_file": "debug", "populate_cache": true}}