{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.14", "generated_at": "2024-05-21T02:27:48.686557Z", "invocation_id": "d07f84e6-7af5-4eb1-8914-4e75affb6adf", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.028232Z", "completed_at": "2024-05-21T02:27:44.050257Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.052838Z", "completed_at": "2024-05-21T02:27:44.052848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03223133087158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"campaign_history_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.038217Z", "completed_at": "2024-05-21T02:27:44.050679Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.053192Z", "completed_at": "2024-05-21T02:27:44.053196Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03178691864013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_label_history_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"campaign_label_history_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_label_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.042228Z", "completed_at": "2024-05-21T02:27:44.051107Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.053852Z", "completed_at": "2024-05-21T02:27:44.053856Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03188824653625488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"campaign_list_history_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_list_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.046489Z", "completed_at": "2024-05-21T02:27:44.052151Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.055511Z", "completed_at": "2024-05-21T02:27:44.055515Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03206515312194824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"campaign_suppression_list_history_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_suppression_list_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.064025Z", "completed_at": "2024-05-21T02:27:44.071794Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.073688Z", "completed_at": "2024-05-21T02:27:44.073693Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016274213790893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_extension_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"event_extension_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event_extension_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.061287Z", "completed_at": "2024-05-21T02:27:44.072099Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.073948Z", "completed_at": "2024-05-21T02:27:44.073953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017255306243896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"channel_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__channel_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.066718Z", "completed_at": "2024-05-21T02:27:44.072448Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.074433Z", "completed_at": "2024-05-21T02:27:44.074436Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016721725463867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"event_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.069250Z", "completed_at": "2024-05-21T02:27:44.073211Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.075798Z", "completed_at": "2024-05-21T02:27:44.075801Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016821861267089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"list_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__list_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.083126Z", "completed_at": "2024-05-21T02:27:44.092938Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.094328Z", "completed_at": "2024-05-21T02:27:44.094333Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017034053802490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"template_history_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__template_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.080186Z", "completed_at": "2024-05-21T02:27:44.093177Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.094550Z", "completed_at": "2024-05-21T02:27:44.094553Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017805099487304688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"message_type_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__message_type_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.085278Z", "completed_at": "2024-05-21T02:27:44.093887Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.096023Z", "completed_at": "2024-05-21T02:27:44.096026Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018273115158081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"user_history_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.087272Z", "completed_at": "2024-05-21T02:27:44.094094Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.096251Z", "completed_at": "2024-05-21T02:27:44.096254Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017953872680664062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"user_unsubscribed_message_type_data\"\n-- had to rename this to be compatible with postgres....", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsub_message_type_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.103343Z", "completed_at": "2024-05-21T02:27:44.104918Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.108062Z", "completed_at": "2024-05-21T02:27:44.108066Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010829687118530273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.campaign_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.105824Z", "completed_at": "2024-05-21T02:27:44.106696Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.109557Z", "completed_at": "2024-05-21T02:27:44.109560Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011166095733642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.campaign_label_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.106955Z", "completed_at": "2024-05-21T02:27:44.107820Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.109783Z", "completed_at": "2024-05-21T02:27:44.109786Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011269807815551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.campaign_list_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.100072Z", "completed_at": "2024-05-21T02:27:44.108271Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.110232Z", "completed_at": "2024-05-21T02:27:44.110235Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013882160186767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_source_integration_tests_3\".\"user_unsubscribed_channel_data\"", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsubscribed_channel_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.113640Z", "completed_at": "2024-05-21T02:27:44.114587Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.118112Z", "completed_at": "2024-05-21T02:27:44.118116Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009383916854858398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.campaign_metrics_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.115912Z", "completed_at": "2024-05-21T02:27:44.116782Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.121141Z", "completed_at": "2024-05-21T02:27:44.121144Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009202003479003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.campaign_suppression_list_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.117036Z", "completed_at": "2024-05-21T02:27:44.117884Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.121358Z", "completed_at": "2024-05-21T02:27:44.121360Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009243011474609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.channel_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.118343Z", "completed_at": "2024-05-21T02:27:44.119908Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.121783Z", "completed_at": "2024-05-21T02:27:44.121786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008431196212768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.event_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.124948Z", "completed_at": "2024-05-21T02:27:44.125849Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.129197Z", "completed_at": "2024-05-21T02:27:44.129201Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008184194564819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.event_extension_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.127112Z", "completed_at": "2024-05-21T02:27:44.127947Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.131436Z", "completed_at": "2024-05-21T02:27:44.131440Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008157730102539062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.list_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.128165Z", "completed_at": "2024-05-21T02:27:44.128975Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.131643Z", "completed_at": "2024-05-21T02:27:44.131646Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008235931396484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.message_type_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.129411Z", "completed_at": "2024-05-21T02:27:44.130224Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.132057Z", "completed_at": "2024-05-21T02:27:44.132060Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007580995559692383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.template_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.135370Z", "completed_at": "2024-05-21T02:27:44.136260Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.140350Z", "completed_at": "2024-05-21T02:27:44.140354Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00892496109008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.user_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.137526Z", "completed_at": "2024-05-21T02:27:44.139072Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.142580Z", "completed_at": "2024-05-21T02:27:44.142583Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008861064910888672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.user_unsubscribed_channel_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.139307Z", "completed_at": "2024-05-21T02:27:44.140115Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.142801Z", "completed_at": "2024-05-21T02:27:44.142804Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008953094482421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.user_unsubscribed_channel_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.140570Z", "completed_at": "2024-05-21T02:27:44.141381Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.143221Z", "completed_at": "2024-05-21T02:27:44.143223Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008214950561523438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.user_unsubscribed_message_type_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.146434Z", "completed_at": "2024-05-21T02:27:44.147335Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:44.158101Z", "completed_at": "2024-05-21T02:27:44.158106Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017889022827148438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_source_integration_tests.user_unsubscribed_message_type_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.148608Z", "completed_at": "2024-05-21T02:27:45.213740Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:45.216148Z", "completed_at": "2024-05-21T02:27:45.216152Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.18603515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_state\n    \n as \n    \n    campaign_state\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    created_by_user_id\n    \n as \n    \n    created_by_user_id\n    \n, \n    \n    \n    updated_by_user_id\n    \n as \n    \n    updated_by_user_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    recurring_campaign_id\n    \n as \n    \n    recurring_campaign_id\n    \n, \n    \n    \n    send_size\n    \n as \n    \n    send_size\n    \n, \n    \n    \n    start_at\n    \n as \n    \n    start_at\n    \n, \n    \n    \n    template_id\n    \n as \n    \n    template_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as TEXT) as campaign_id,\n        updated_at,\n        name as campaign_name,\n        campaign_state,\n        type as campaign_type,\n        send_size,\n        start_at,\n        ended_at,\n        created_at,\n        message_medium,\n        cast(recurring_campaign_id as TEXT) as recurring_campaign_id,\n        cast(created_by_user_id as TEXT ) as created_by_user_id,\n        cast(updated_by_user_id as TEXT ) as updated_by_user_id,\n        cast(template_id as TEXT) as template_id,\n        workflow_id,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.164186Z", "completed_at": "2024-05-21T02:27:45.214423Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:45.216813Z", "completed_at": "2024-05-21T02:27:45.216817Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1701586246490479, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_suppression_list_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_suppression_list_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    suppressed_list_id\n    \n as \n    \n    suppressed_list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(campaign_id as TEXT) as campaign_id,\n        cast(suppressed_list_id as TEXT) as suppressed_list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_suppression_list_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.158336Z", "completed_at": "2024-05-21T02:27:45.214100Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:45.216473Z", "completed_at": "2024-05-21T02:27:45.216478Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1885709762573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_list_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    list_id\n    \n as \n    \n    list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(campaign_id as TEXT) as campaign_id,\n        cast(list_id as TEXT) as list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_list_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:44.154626Z", "completed_at": "2024-05-21T02:27:45.213058Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:45.214737Z", "completed_at": "2024-05-21T02:27:45.214745Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1906769275665283, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_label_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_label_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(campaign_id as TEXT) as campaign_id,\n        label,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_label_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:45.350709Z", "completed_at": "2024-05-21T02:27:46.387817Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:46.389444Z", "completed_at": "2024-05-21T02:27:46.389448Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1595971584320068, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__channel_tmp\"\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_type\n    \n as \n    \n    channel_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT ) as channel_id,\n        name as channel_name,\n        channel_type,\n        message_medium,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__channel\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:45.365972Z", "completed_at": "2024-05-21T02:27:46.387405Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:46.389190Z", "completed_at": "2024-05-21T02:27:46.389197Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1681461334228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__list_tmp\"\n    where not coalesce(_fivetran_deleted, true)\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    list_type\n    \n as \n    \n    list_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as list_id,\n        name as list_name,\n        list_type,\n        created_at,\n        description as list_description,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__list\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:45.357912Z", "completed_at": "2024-05-21T02:27:46.388938Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:46.390859Z", "completed_at": "2024-05-21T02:27:46.390863Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1693050861358643, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_user_id\n    \n as \n    \n    _fivetran_user_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    event_name\n    \n as \n    \n    event_name\n    \n, \n    \n    \n    message_bus_id\n    \n as \n    \n    message_bus_id\n    \n, \n    \n    \n    message_id\n    \n as \n    \n    message_id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    recipient_state\n    \n as \n    \n    recipient_state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    unsub_source\n    \n as \n    \n    unsub_source\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n, \n    \n    \n    user_agent_device\n    \n as \n    \n    user_agent_device\n    \n, \n    \n    \n    transactional_data\n    \n as \n    \n    transactional_data\n    \n, \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(_fivetran_id as TEXT ) as event_id,\n        md5(cast(coalesce(cast(_fivetran_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(_fivetran_user_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_event_id,\n        cast(_fivetran_user_id as TEXT ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_user_id as TEXT ) , email) as unique_user_key,\n        cast(campaign_id as TEXT ) as campaign_id,\n        cast(content_id as TEXT ) as content_id,\n        created_at,\n        cast( date_trunc('day', created_at) as date) as created_on,\n        lower(email) as email,\n        additional_properties,\n        event_name,\n        cast(message_bus_id as TEXT ) as message_bus_id,\n        cast(message_id as TEXT ) as message_id,\n        cast(message_type_id as TEXT ) as message_type_id,\n        recipient_state,\n        status,\n        transactional_data,\n        unsub_source,\n        user_agent,\n        user_agent_device,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:45.341666Z", "completed_at": "2024-05-21T02:27:46.388636Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:46.390607Z", "completed_at": "2024-05-21T02:27:46.390611Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1725502014160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_extension", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event_extension_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    app_already_running\n    \n as \n    \n    app_already_running\n    \n, \n    \n    \n    badge\n    \n as \n    \n    badge\n    \n, \n    \n    \n    catalog_collection_count\n    \n as \n    \n    catalog_collection_count\n    \n, \n    \n    \n    catalog_lookup_count\n    \n as \n    \n    catalog_lookup_count\n    \n, \n    \n    \n    canonical_url_id\n    \n as \n    \n    canonical_url_id\n    \n, \n    \n    \n    content_available\n    \n as \n    \n    content_available\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    email_id\n    \n as \n    \n    email_id\n    \n, \n    \n    \n    email_subject\n    \n as \n    \n    email_subject\n    \n, \n    \n    \n    experiment_id\n    \n as \n    \n    experiment_id\n    \n, \n    \n    \n    from_phone_number_id\n    \n as \n    \n    from_phone_number_id\n    \n, \n    \n    \n    from_smssender_id\n    \n as \n    \n    from_smssender_id\n    \n, \n    \n    \n    link_id\n    \n as \n    \n    link_id\n    \n, \n    \n    \n    link_url\n    \n as \n    \n    link_url\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    payload\n    \n as \n    \n    payload\n    \n, \n    \n    \n    platform_endpoint\n    \n as \n    \n    platform_endpoint\n    \n, \n    \n    \n    push_message\n    \n as \n    \n    push_message\n    \n, \n    \n    \n    region\n    \n as \n    \n    region\n    \n, \n    \n    \n    sms_message\n    \n as \n    \n    sms_message\n    \n, \n    \n    \n    to_phone_number\n    \n as \n    \n    to_phone_number\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    workflow_name\n    \n as \n    \n    workflow_name\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    clicked_url\n    \n as \n    \n    clicked_url\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    expires_at\n    \n as \n    \n    expires_at\n    \n, \n    \n    \n    from_phone_number\n    \n as \n    \n    from_phone_number\n    \n, \n    \n    \n    in_app_body\n    \n as \n    \n    in_app_body\n    \n, \n    \n    \n    is_sms_estimation\n    \n as \n    \n    is_sms_estimation\n    \n, \n    \n    \n    labels\n    \n as \n    \n    labels\n    \n, \n    \n    \n    message_status\n    \n as \n    \n    message_status\n    \n, \n    \n    \n    mms_send_count\n    \n as \n    \n    mms_send_count\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    sms_send_count\n    \n as \n    \n    sms_send_count\n    \n, \n    \n    \n    _fivetran_user_id\n    \n as \n    \n    _fivetran_user_id\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n    select\n        cast(_fivetran_id as TEXT ) as event_id,\n        md5(cast(coalesce(cast(_fivetran_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(_fivetran_user_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_event_id,\n        app_already_running as is_app_already_running,\n        badge,\n        catalog_collection_count,\n        catalog_lookup_count,\n        cast(canonical_url_id as TEXT ) as canonical_url_id,\n        content_available as is_content_available,\n        cast(content_id as TEXT ) as content_id,\n        device,\n        cast(email_id as TEXT) as email_id,\n        email_subject,\n        experiment_id,\n        from_phone_number_id,\n        from_smssender_id,\n        cast(link_id as TEXT ) as link_id,\n        link_url,\n        locale,\n        payload,\n        platform_endpoint,\n        push_message,\n        region,\n        sms_message,\n        to_phone_number,\n        url,\n        cast(workflow_id as TEXT ) as workflow_id,\n        workflow_name,\n        city,\n        clicked_url,\n        country,\n        error_code,\n        expires_at,\n        from_phone_number,\n        in_app_body,\n        is_sms_estimation,\n        labels,\n        message_status,\n        mms_send_count,\n        reason,\n        sms_send_count,\n        _fivetran_synced,\n        cast(_fivetran_user_id as TEXT ) as _fivetran_user_id\n\n        --The below script allows for pass through columns.\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event_extension\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:46.500843Z", "completed_at": "2024-05-21T02:27:47.482897Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.484366Z", "completed_at": "2024-05-21T02:27:47.484387Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0801670551300049, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__template_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    client_template_id\n    \n as \n    \n    client_template_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_user_id\n    \n as \n    \n    creator_user_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    template_type\n    \n as \n    \n    template_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT ) as template_id,\n        name as template_name,\n        template_type,\n        created_at,\n        cast(client_template_id as TEXT ) as client_template_id,\n        cast(creator_user_id as TEXT ) as creator_user_id,\n        cast(message_type_id as TEXT ) as message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__template_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:46.554904Z", "completed_at": "2024-05-21T02:27:47.581034Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.583820Z", "completed_at": "2024-05-21T02:27:47.583826Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.170003890991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsub_message_type_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n\n    select \n\n        cast(_fivetran_id as TEXT ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as TEXT ), email) as unique_user_key,\n        cast(message_type_id as TEXT ) as message_type_id,\n        md5(cast(coalesce(cast(_fivetran_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(message_type_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unsub_message_type_unique_key,\n        \n        \n        1 as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsub_message_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:46.514845Z", "completed_at": "2024-05-21T02:27:47.581358Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.584144Z", "completed_at": "2024-05-21T02:27:47.584148Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1882576942443848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__message_type_tmp\"\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    frequency_cap\n    \n as \n    \n    frequency_cap\n    \n, \n    \n    \n    rate_limit_per_minute\n    \n as \n    \n    rate_limit_per_minute\n    \n, \n    \n    \n    subscription_policy\n    \n as \n    \n    subscription_policy\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as TEXT ) as message_type_id,\n        name as message_type_name,\n        cast(channel_id as TEXT ) as channel_id,\n        created_at as message_type_created_at,\n        frequency_cap,\n        rate_limit_per_minute,\n        subscription_policy,\n        updated_at as message_type_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__message_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:46.520138Z", "completed_at": "2024-05-21T02:27:47.580640Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.583489Z", "completed_at": "2024-05-21T02:27:47.583495Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1884958744049072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as TEXT) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    email_list_ids\n    \n as \n    \n    email_list_ids\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    signup_date\n    \n as \n    \n    signup_date\n    \n, \n    \n    \n    signup_source\n    \n as \n    \n    signup_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    iterable_user_id\n    \n as \n    \n    iterable_user_id\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_id as TEXT ) as _fivetran_user_id,\n        lower(email) as email,\n        updated_at,\n        cast(user_id as TEXT ) as user_id,\n        first_name,\n        last_name,\n        cast(email_list_ids as TEXT) as email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        cast(iterable_user_id as TEXT ) as iterable_user_id,\n        _fivetran_synced,\n        coalesce(cast(_fivetran_id as TEXT ) , email) as unique_user_key\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.686483Z", "completed_at": "2024-05-21T02:27:47.705080Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.718966Z", "completed_at": "2024-05-21T02:27:47.718973Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.034654855728149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at.81e1a1b9b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_history\"\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.705513Z", "completed_at": "2024-05-21T02:27:47.721071Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.725891Z", "completed_at": "2024-05-21T02:27:47.725897Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023673057556152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id.b7c36e4525", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_history\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.713702Z", "completed_at": "2024-05-21T02:27:47.721626Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.726270Z", "completed_at": "2024-05-21T02:27:47.726274Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023685216903686523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_suppression_list_history_campaign_id.3921289710", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_suppression_list_history\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.722198Z", "completed_at": "2024-05-21T02:27:47.727851Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.729841Z", "completed_at": "2024-05-21T02:27:47.729844Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010240793228149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id.208f9bf9ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_list_history\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.734231Z", "completed_at": "2024-05-21T02:27:47.742368Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.743428Z", "completed_at": "2024-05-21T02:27:47.743432Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01491403579711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__channel_channel_id.182ceb9636", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__channel\"\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.731151Z", "completed_at": "2024-05-21T02:27:47.742636Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.743916Z", "completed_at": "2024-05-21T02:27:47.743920Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01599907875061035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_label_history_campaign_id.1918cef89a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__campaign_label_history\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.738300Z", "completed_at": "2024-05-21T02:27:47.743671Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.745599Z", "completed_at": "2024-05-21T02:27:47.745603Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008967876434326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__channel_channel_id.fc1eec7fbc", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    channel_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__channel\"\nwhere channel_id is not null\ngroup by channel_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.747847Z", "completed_at": "2024-05-21T02:27:47.757215Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.757925Z", "completed_at": "2024-05-21T02:27:47.757930Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012672185897827148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__list_list_id.47029d839a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect list_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__list\"\nwhere list_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.750707Z", "completed_at": "2024-05-21T02:27:47.757713Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.759225Z", "completed_at": "2024-05-21T02:27:47.759228Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013194799423217773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__list_list_id.1e73c3def7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    list_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__list\"\nwhere list_id is not null\ngroup by list_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.754197Z", "completed_at": "2024-05-21T02:27:47.758177Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.759685Z", "completed_at": "2024-05-21T02:27:47.759687Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010447025299072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__event_unique_event_id__created_at.468c9e26a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_event_id, created_at\n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event\"\n    group by unique_event_id, created_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.762042Z", "completed_at": "2024-05-21T02:27:47.769827Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.770371Z", "completed_at": "2024-05-21T02:27:47.770375Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010545730590820312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__event_event_id.370cd4bc9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.765206Z", "completed_at": "2024-05-21T02:27:47.771391Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.772796Z", "completed_at": "2024-05-21T02:27:47.772800Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015145063400268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__event_extension_event_id.144dedcd30", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event_extension\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.767613Z", "completed_at": "2024-05-21T02:27:47.771621Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.773029Z", "completed_at": "2024-05-21T02:27:47.773033Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012871742248535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__event_extension_unique_event_id.4f0d870433", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__event_extension\"\nwhere unique_event_id is not null\ngroup by unique_event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.773252Z", "completed_at": "2024-05-21T02:27:47.778167Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.779616Z", "completed_at": "2024-05-21T02:27:47.779619Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01276087760925293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at.e0b90faa8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        template_id, updated_at\n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__template_history\"\n    group by template_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.779847Z", "completed_at": "2024-05-21T02:27:47.785858Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.789300Z", "completed_at": "2024-05-21T02:27:47.789305Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011584043502807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__template_history_template_id.14b24a1dfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect template_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__template_history\"\nwhere template_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.782207Z", "completed_at": "2024-05-21T02:27:47.786086Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.789559Z", "completed_at": "2024-05-21T02:27:47.789563Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01170206069946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_message_type_id.268a89ea6f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsub_message_type\"\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.786312Z", "completed_at": "2024-05-21T02:27:47.790685Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.792255Z", "completed_at": "2024-05-21T02:27:47.792259Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007674694061279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsub_message_type_unsub_message_type_unique_key.2e13291de3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unsub_message_type_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsub_message_type\"\nwhere unsub_message_type_unique_key is not null\ngroup by unsub_message_type_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.793268Z", "completed_at": "2024-05-21T02:27:47.802238Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.803160Z", "completed_at": "2024-05-21T02:27:47.803164Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01239013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_unique_user_key__updated_at.3e120444d3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, updated_at\n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_history\"\n    group by unique_user_key, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.795982Z", "completed_at": "2024-05-21T02:27:47.802492Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.803595Z", "completed_at": "2024-05-21T02:27:47.803598Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012685060501098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__message_type_message_type_id.75eaa6fa62", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__message_type\"\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.799880Z", "completed_at": "2024-05-21T02:27:47.803381Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.805154Z", "completed_at": "2024-05-21T02:27:47.805157Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006628990173339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_history_unique_user_key.2845af2127", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_history\"\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.806419Z", "completed_at": "2024-05-21T02:27:47.808883Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:47.809308Z", "completed_at": "2024-05-21T02:27:47.809311Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004246234893798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__message_type_message_type_id.0f75f83a34", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    message_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__message_type\"\nwhere message_type_id is not null\ngroup by message_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:47.585515Z", "completed_at": "2024-05-21T02:27:48.545617Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:48.546230Z", "completed_at": "2024-05-21T02:27:48.546238Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0653290748596191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsubscribed_channel_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n\n        cast(_fivetran_id as TEXT ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as TEXT ), email) as unique_user_key,\n        cast(channel_id as TEXT ) as channel_id,\n        md5(cast(coalesce(cast(_fivetran_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(channel_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unsub_channel_unique_key,\n        \n        \n        1 as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsubscribed_channel\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:48.672217Z", "completed_at": "2024-05-21T02:27:48.679997Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:48.681789Z", "completed_at": "2024-05-21T02:27:48.681799Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02503180503845215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsubscribed_channel_unsub_channel_unique_key.48ad1606c9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unsub_channel_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsubscribed_channel\"\nwhere unsub_channel_unique_key is not null\ngroup by unsub_channel_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T02:27:48.660325Z", "completed_at": "2024-05-21T02:27:48.680643Z"}, {"name": "execute", "started_at": "2024-05-21T02:27:48.682040Z", "completed_at": "2024-05-21T02:27:48.682043Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027656078338623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_channel_id.da0ed9e9be", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom \"postgres\".\"iterable_source_integration_tests_3_stg_iterable\".\"stg_iterable__user_unsubscribed_channel\"\nwhere channel_id is null\n\n\n", "relation_name": null}], "elapsed_time": 7.92405104637146, "args": {"populate_cache": true, "log_file_max_bytes": 10485760, "select": [], "quiet": false, "empty_catalog": false, "enable_legacy_logger": false, "show_resource_report": false, "cache_selected_only": false, "vars": {}, "profiles_dir": "/Users/avinash.kunnath/.dbt", "version_check": true, "log_level_file": "debug", "log_level": "info", "static_parser": true, "warn_error_options": {"include": [], "exclude": []}, "favor_state": false, "which": "generate", "use_colors": true, "invocation_command": "dbt docs generate -t postgres", "defer": false, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/iterable/dbt_iterable_source/integration_tests", "print": true, "require_explicit_package_overrides_for_builtin_materializations": false, "log_format": "default", "partial_parse": true, "use_colors_file": true, "partial_parse_file_diff": true, "compile": true, "target": "postgres", "strict_mode": false, "send_anonymous_usage_stats": true, "static": false, "printer_width": 80, "log_format_file": "debug", "indirect_selection": "eager", "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/iterable/dbt_iterable_source/integration_tests/logs", "macro_debugging": false, "write_json": true, "exclude": [], "introspect": true}}